//This file is automatically generated. DO NOT EDIT!
package experimental.createwebcam2;
import java.util.*;
import com.robotraconteur.*;
public class experimental__createwebcam2Factory extends ServiceFactory
{
    public String defString()
{
    String out="#Service to provide sample interface to webcams\nservice experimental.createwebcam2\n\noption version 0.9\n\nstruct WebcamImage\nfield int32 width\nfield int32 height\nfield int32 step\nfield uint8[] data\nend\n\nstruct WebcamImage_size\nfield int32 width\nfield int32 height\nfield int32 step\nend\n\nobject Webcam\nproperty string Name [readonly]\nfunction WebcamImage CaptureFrame()\n\nfunction void StartStreaming()\nfunction void StopStreaming()\npipe WebcamImage FrameStream [readonly]\n\nfunction WebcamImage_size CaptureFrameToBuffer()\nmemory uint8[] buffer [readonly]\nmemory uint8[*] multidimbuffer [readonly]\n\nend\n\nobject WebcamHost\nproperty string{int32} WebcamNames [readonly]\nobjref Webcam{int32} Webcams\nend\n";
    return out;    }
    public String getServiceName() {return "experimental.createwebcam2";}
    public WebcamImage_stub WebcamImage_stubentry;
    public WebcamImage_size_stub WebcamImage_size_stubentry;
    public experimental__createwebcam2Factory()
{
    WebcamImage_stubentry=new WebcamImage_stub(this);
    WebcamImage_size_stubentry=new WebcamImage_size_stub(this);
    }
    public IStructureStub findStructureStub(String objecttype)
    {
    if (objecttype.equals("WebcamImage"))    return WebcamImage_stubentry;
    if (objecttype.equals("WebcamImage_size"))    return WebcamImage_size_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public IPodStub findPodStub(String objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public INamedArrayStub findNamedArrayStub(String objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public ServiceStub createStub(WrappedServiceStub innerstub) {
    String objecttype=innerstub.getRR_objecttype().getServiceDefinition().getName() + "." + innerstub.getRR_objecttype().getName();
    if (RobotRaconteurNode.splitQualifiedName(objecttype)[0].equals( "experimental.createwebcam2")) {
    String objshort=removePath(objecttype);
    if(objshort.equals( "Webcam"))
    return new Webcam_stub(innerstub);
    if(objshort.equals( "WebcamHost"))
    return new WebcamHost_stub(innerstub);
    } else {
    String ext_service_type=(RobotRaconteurNode.splitQualifiedName(objecttype)[0]);
    return RobotRaconteurNode.s().getServiceType(ext_service_type).createStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public ServiceSkel createSkel(Object obj) {
    String objtype=ServiceSkelUtil.findParentInterface(obj.getClass()).getName().toString();
    if ((RobotRaconteurNode.splitQualifiedName(objtype.toString())[0]).equals( "experimental.createwebcam2")) {
    String sobjtype=removePath(objtype);
    if(sobjtype.equals( "Webcam"))
    return new Webcam_skel((Webcam)obj);
    if(sobjtype.equals( "WebcamHost"))
    return new WebcamHost_skel((WebcamHost)obj);
    } else {
    String ext_service_type=(RobotRaconteurNode.splitQualifiedName(objtype.toString())[0]);
    return RobotRaconteurNode.s().getServiceType(ext_service_type).createSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public RobotRaconteurException downCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    String rr_type=rr_exp.error;
    if (!rr_type.contains(".")) return rr_exp;
    String[] rr_stype = RobotRaconteurNode.splitQualifiedName(rr_type);
    if (!rr_stype[0].equals("experimental.createwebcam2")) return RobotRaconteurNode.s().downCastException(rr_exp);
    return rr_exp;
    }
}
