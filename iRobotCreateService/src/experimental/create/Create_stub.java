//This file is automatically generated. DO NOT EDIT!
package experimental.create;
import java.util.*;
import com.robotraconteur.*;
public class Create_stub extends ServiceStub implements Create, async_Create {
    private CallbackClient<Func2<Integer,Integer,UnsignedBytes>> rr_play_callback;
    private Wire<SensorPacket> rr_packets;
    public Create_stub(WrappedServiceStub innerstub) {
        super(innerstub); 
    rr_play_callback=new CallbackClient<Func2<Integer,Integer,UnsignedBytes>>("play_callback");
    rr_packets=new Wire<SensorPacket>(innerstub.getWire("packets"));
    }
    public int get_DistanceTraveled() {
    return (MessageElementUtil.<int[]>castDataAndDispose(rr_innerstub.propertyGet("DistanceTraveled")))[0];
    }
    public void set_DistanceTraveled(int value) {
    MessageElement m=null;
    try {
    m=MessageElementUtil.newMessageElementDispose("value",new int[] {value});
    rr_innerstub.propertySet("DistanceTraveled", m);
    }
    finally {
    if (m!=null) m.delete();
    }
    }
    public int get_AngleTraveled() {
    return (MessageElementUtil.<int[]>castDataAndDispose(rr_innerstub.propertyGet("AngleTraveled")))[0];
    }
    public void set_AngleTraveled(int value) {
    MessageElement m=null;
    try {
    m=MessageElementUtil.newMessageElementDispose("value",new int[] {value});
    rr_innerstub.propertySet("AngleTraveled", m);
    }
    finally {
    if (m!=null) m.delete();
    }
    }
    public UnsignedByte get_Bumpers() {
    return MessageElementUtil.<UnsignedBytes>castDataAndDispose(rr_innerstub.propertyGet("Bumpers")).get(0);
    }
    public void set_Bumpers(UnsignedByte value) {
    MessageElement m=null;
    try {
    m=MessageElementUtil.newMessageElementDispose("value",value.array());
    rr_innerstub.propertySet("Bumpers", m);
    }
    finally {
    if (m!=null) m.delete();
    }
    }
    public void Drive(short velocity, short radius) {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    MessageElement rr_me=null;
    try {
    MessageElementUtil.addMessageElementDispose(rr_param, MessageElementUtil.newMessageElementDispose("velocity",new short[] {velocity}));
    MessageElementUtil.addMessageElementDispose(rr_param, MessageElementUtil.newMessageElementDispose("radius",new short[] {radius}));
    rr_me=rr_innerstub.functionCall("Drive",rr_param);
    }
    finally {
    rr_param.delete();
    if (rr_me!=null) rr_me.delete();
    }
    }
    public void StartStreaming() {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    MessageElement rr_me=null;
    try {
    rr_me=rr_innerstub.functionCall("StartStreaming",rr_param);
    }
    finally {
    rr_param.delete();
    if (rr_me!=null) rr_me.delete();
    }
    }
    public void StopStreaming() {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    MessageElement rr_me=null;
    try {
    rr_me=rr_innerstub.functionCall("StopStreaming",rr_param);
    }
    finally {
    rr_param.delete();
    if (rr_me!=null) rr_me.delete();
    }
    }
    private  Vector<Action> rr_Bump=new Vector<Action>();
    public void  addBumpListener(Action listener) {
    synchronized(rr_Bump) {
    rr_Bump.add(listener);
    }
    }
    public void  removeBumpListener(Action listener) {
    synchronized(rr_Bump) {
    rr_Bump.remove(listener);
    }
    }
    public void dispatchEvent(String rr_membername, vectorptr_messageelement rr_m) {
    if(rr_membername.equals( "Bump"))
    {
    for (Action rr_e : this.rr_Bump) {
    rr_e.action();
    }
    return;
    }
    }
    public Callback<Func2<Integer,Integer,UnsignedBytes>> get_play_callback()
    { return rr_play_callback;  }
    public void set_play_callback(Callback<Func2<Integer,Integer,UnsignedBytes>> value)
    { throw new RuntimeException();}
    public Wire<SensorPacket> get_packets()
    { return rr_packets;  }
    public void set_packets(Wire<SensorPacket> value)
    { throw new RuntimeException();}
    public MessageElement callbackCall(String rr_membername, vectorptr_messageelement rr_m) {
    if(rr_membername.equals( "play_callback"))
    {
    int DistanceTraveled=(MessageElementUtil.<int[]>castDataAndDispose(vectorptr_messageelement_util.findElement(rr_m,"DistanceTraveled")))[0];
    int AngleTraveled=(MessageElementUtil.<int[]>castDataAndDispose(vectorptr_messageelement_util.findElement(rr_m,"AngleTraveled")))[0];
    UnsignedBytes rr_ret=get_play_callback().getFunction().func(Integer.valueOf(DistanceTraveled), Integer.valueOf(AngleTraveled));
    return MessageElementUtil.newMessageElementDispose("return",rr_ret);
    }
    throw new MemberNotFoundException("Member not found");
    }
    public void async_get_DistanceTraveled(Action2<Integer,RuntimeException> rr_handler, int rr_timeout)
    {
    rr_async_PropertyGet("DistanceTraveled",new rrend_async_get_DistanceTraveled(),rr_handler,rr_timeout);
    }
    protected class rrend_async_get_DistanceTraveled implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement value ,RuntimeException err,Object param)
    {
    Action2<Integer,RuntimeException> rr_handler=(Action2<Integer,RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action((int)0,err);
    return;
    }
    Integer rr_ret;
    try {
    rr_ret=(MessageElementUtil.<int[]>castDataAndDispose(value))[0];
    } catch (RuntimeException err2) {
    rr_handler.action((int)0,err2);
    return;
    }
    rr_handler.action(rr_ret,null);
    }
    }
    public void async_set_DistanceTraveled(int value, Action1<RuntimeException> rr_handler, int rr_timeout)
    {
    MessageElement m=null;
    try {
    m=MessageElementUtil.newMessageElementDispose("value",new int[] {value});
    rr_async_PropertySet("DistanceTraveled",m,new rrend_async_set_DistanceTraveled(),rr_handler,rr_timeout);
    }
    finally {
    if (m!=null) m.delete();
    }
    }
    protected class rrend_async_set_DistanceTraveled implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement m ,RuntimeException err,Object param)
    {
    Action1<RuntimeException> rr_handler=(Action1<RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(err);
    return;
    }
    rr_handler.action(null);
    }
    }
    public void async_get_AngleTraveled(Action2<Integer,RuntimeException> rr_handler, int rr_timeout)
    {
    rr_async_PropertyGet("AngleTraveled",new rrend_async_get_AngleTraveled(),rr_handler,rr_timeout);
    }
    protected class rrend_async_get_AngleTraveled implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement value ,RuntimeException err,Object param)
    {
    Action2<Integer,RuntimeException> rr_handler=(Action2<Integer,RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action((int)0,err);
    return;
    }
    Integer rr_ret;
    try {
    rr_ret=(MessageElementUtil.<int[]>castDataAndDispose(value))[0];
    } catch (RuntimeException err2) {
    rr_handler.action((int)0,err2);
    return;
    }
    rr_handler.action(rr_ret,null);
    }
    }
    public void async_set_AngleTraveled(int value, Action1<RuntimeException> rr_handler, int rr_timeout)
    {
    MessageElement m=null;
    try {
    m=MessageElementUtil.newMessageElementDispose("value",new int[] {value});
    rr_async_PropertySet("AngleTraveled",m,new rrend_async_set_AngleTraveled(),rr_handler,rr_timeout);
    }
    finally {
    if (m!=null) m.delete();
    }
    }
    protected class rrend_async_set_AngleTraveled implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement m ,RuntimeException err,Object param)
    {
    Action1<RuntimeException> rr_handler=(Action1<RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(err);
    return;
    }
    rr_handler.action(null);
    }
    }
    public void async_get_Bumpers(Action2<UnsignedByte,RuntimeException> rr_handler, int rr_timeout)
    {
    rr_async_PropertyGet("Bumpers",new rrend_async_get_Bumpers(),rr_handler,rr_timeout);
    }
    protected class rrend_async_get_Bumpers implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement value ,RuntimeException err,Object param)
    {
    Action2<UnsignedByte,RuntimeException> rr_handler=(Action2<UnsignedByte,RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(new UnsignedByte((byte)0),err);
    return;
    }
    UnsignedByte rr_ret;
    try {
    rr_ret=MessageElementUtil.<UnsignedBytes>castDataAndDispose(value).get(0);
    } catch (RuntimeException err2) {
    rr_handler.action(new UnsignedByte((byte)0),err2);
    return;
    }
    rr_handler.action(rr_ret,null);
    }
    }
    public void async_set_Bumpers(UnsignedByte value, Action1<RuntimeException> rr_handler, int rr_timeout)
    {
    MessageElement m=null;
    try {
    m=MessageElementUtil.newMessageElementDispose("value",value.array());
    rr_async_PropertySet("Bumpers",m,new rrend_async_set_Bumpers(),rr_handler,rr_timeout);
    }
    finally {
    if (m!=null) m.delete();
    }
    }
    protected class rrend_async_set_Bumpers implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement m ,RuntimeException err,Object param)
    {
    Action1<RuntimeException> rr_handler=(Action1<RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(err);
    return;
    }
    rr_handler.action(null);
    }
    }
    public void async_Drive(short velocity, short radius,Action1<RuntimeException> rr_handler,int rr_timeout)
    {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    try {
    MessageElementUtil.addMessageElementDispose(rr_param,MessageElementUtil.newMessageElementDispose("velocity",new short[] {velocity}));
    MessageElementUtil.addMessageElementDispose(rr_param,MessageElementUtil.newMessageElementDispose("radius",new short[] {radius}));
    rr_async_FunctionCall("Drive",rr_param,new rrend_async_Drive(),rr_handler,rr_timeout);
    }
    finally {
    rr_param.delete();
    }
    }
    protected class rrend_async_Drive implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement ret ,RuntimeException err,Object param)
    {
    Action1<RuntimeException> rr_handler=(Action1<RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(err);
    return;
    }
    rr_handler.action(null);
    }
    }
    public void async_StartStreaming(Action1<RuntimeException> rr_handler,int rr_timeout)
    {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    try {
    rr_async_FunctionCall("StartStreaming",rr_param,new rrend_async_StartStreaming(),rr_handler,rr_timeout);
    }
    finally {
    rr_param.delete();
    }
    }
    protected class rrend_async_StartStreaming implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement ret ,RuntimeException err,Object param)
    {
    Action1<RuntimeException> rr_handler=(Action1<RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(err);
    return;
    }
    rr_handler.action(null);
    }
    }
    public void async_StopStreaming(Action1<RuntimeException> rr_handler,int rr_timeout)
    {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    try {
    rr_async_FunctionCall("StopStreaming",rr_param,new rrend_async_StopStreaming(),rr_handler,rr_timeout);
    }
    finally {
    rr_param.delete();
    }
    }
    protected class rrend_async_StopStreaming implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement ret ,RuntimeException err,Object param)
    {
    Action1<RuntimeException> rr_handler=(Action1<RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(err);
    return;
    }
    rr_handler.action(null);
    }
    }
}
