//This file is automatically generated. DO NOT EDIT!
package experimental.create2;
import java.util.*;
import com.robotraconteur.*;
public class experimental__create2Factory extends ServiceFactory
{
    public String defString()
{
    String out="\n#Service to provide sample interface to the iRobot Create\nservice experimental.create2\n\noption version 0.9\n\nstruct SensorPacket\nfield uint8 ID\nfield uint8[] Data\nend\n\nobject Create\nconstant int16 DRIVE_STRAIGHT 32767\nconstant int16 SPIN_CLOCKWISE -1\nconstant int16 SPIN_COUNTERCLOCKWISE 1\n\nfunction void Drive(int16 velocity, int16 radius)\n\nfunction void StartStreaming()\nfunction void StopStreaming()\n\nproperty int32 DistanceTraveled [readonly]\nproperty int32 AngleTraveled [readonly]\nproperty uint8 Bumpers [readonly]\n\nevent Bump()\n\nwire SensorPacket packets [readonly]\n\ncallback uint8[] play_callback(int32 DistanceTraveled, int32 AngleTraveled)\nend\n\n";
    return out;    }
    public String getServiceName() {return "experimental.create2";}
    public SensorPacket_stub SensorPacket_stubentry;
    public experimental__create2Factory()
{
    SensorPacket_stubentry=new SensorPacket_stub(this);
    }
    public IStructureStub findStructureStub(String objecttype)
    {
    if (objecttype.equals("SensorPacket"))    return SensorPacket_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public IPodStub findPodStub(String objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public INamedArrayStub findNamedArrayStub(String objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public ServiceStub createStub(WrappedServiceStub innerstub) {
    String objecttype=innerstub.getRR_objecttype().getServiceDefinition().getName() + "." + innerstub.getRR_objecttype().getName();
    if (RobotRaconteurNode.splitQualifiedName(objecttype)[0].equals( "experimental.create2")) {
    String objshort=removePath(objecttype);
    if(objshort.equals( "Create"))
    return new Create_stub(innerstub);
    } else {
    String ext_service_type=(RobotRaconteurNode.splitQualifiedName(objecttype)[0]);
    return RobotRaconteurNode.s().getServiceType(ext_service_type).createStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public ServiceSkel createSkel(Object obj) {
    String objtype=ServiceSkelUtil.findParentInterface(obj.getClass()).getName().toString();
    if ((RobotRaconteurNode.splitQualifiedName(objtype.toString())[0]).equals( "experimental.create2")) {
    String sobjtype=removePath(objtype);
    if(sobjtype.equals( "Create"))
    return new Create_skel((Create)obj);
    } else {
    String ext_service_type=(RobotRaconteurNode.splitQualifiedName(objtype.toString())[0]);
    return RobotRaconteurNode.s().getServiceType(ext_service_type).createSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public RobotRaconteurException downCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    String rr_type=rr_exp.error;
    if (!rr_type.contains(".")) return rr_exp;
    String[] rr_stype = RobotRaconteurNode.splitQualifiedName(rr_type);
    if (!rr_stype[0].equals("experimental.create2")) return RobotRaconteurNode.s().downCastException(rr_exp);
    return rr_exp;
    }
}
