//This file is automatically generated. DO NOT EDIT!
package experimental.createwebcam2;
import java.util.*;
import com.robotraconteur.*;
public class Webcam_skel extends ServiceSkel {
    protected Webcam obj;
    public Webcam_skel(Object o) { 
    super(o);
    obj=(Webcam)o;
    }
    public void releaseCastObject() { 
    obj=null;
    super.releaseCastObject();
    }
    public MessageElement callGetProperty(String membername) {
    if(membername.equals( "Name"))
    {
    String ret=obj.get_Name();
    return MessageElementUtil.packString("return",ret);
    }
    throw new MemberNotFoundException("Member not found");
    }
    public void callSetProperty(String membername, MessageElement m) {
    throw new MemberNotFoundException("Member not found");
    }
    public MessageElement callFunction(String rr_membername, vectorptr_messageelement rr_m) {
    if(rr_membername.equals( "CaptureFrame"))
    {
    WebcamImage rr_ret=obj.CaptureFrame();
    return MessageElementUtil.packStructure("return",rr_ret);
    }
    if(rr_membername.equals( "StartStreaming"))
    {
    this.obj.StartStreaming();
    return new MessageElement("return",new int[] {0});
    }
    if(rr_membername.equals( "StopStreaming"))
    {
    this.obj.StopStreaming();
    return new MessageElement("return",new int[] {0});
    }
    if(rr_membername.equals( "CaptureFrameToBuffer"))
    {
    WebcamImage_size rr_ret=obj.CaptureFrameToBuffer();
    return MessageElementUtil.packStructure("return",rr_ret);
    }
    throw new MemberNotFoundException("Member not found");
    }
    public Object getSubObj(String name, String ind) {
    throw new MemberNotFoundException("");
    }
    public void registerEvents(Object obj1) {
    obj=(Webcam)obj1;
    }
    public void unregisterEvents(Object obj1) {
    obj=(Webcam)obj1;
    }
    public Object getCallbackFunction(long endpoint, String membername) {
    throw new MemberNotFoundException("Member not found");
    }
    public  void initPipeServers(Object obj1) {
    obj=(Webcam)obj1;
    obj.set_FrameStream(new Pipe<WebcamImage>(innerskel.getPipe("FrameStream")));
    }
    public void initCallbackServers(Object obj1) {
    obj=(Webcam)obj1;
    }
    public void initWireServers(Object obj1) {
    obj=(Webcam)obj1;
    }
    public WrappedArrayMemoryDirector getArrayMemory(String name) {
    if(name.equals( "buffer")) {
    WrappedArrayMemoryDirectorJava<UnsignedBytes> dir=new  WrappedArrayMemoryDirectorJava<UnsignedBytes>(obj.get_buffer());
    return dir;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public WrappedMultiDimArrayMemoryDirector getMultiDimArrayMemory(String name) {
    if(name.equals( "multidimbuffer")) {
    WrappedMultiDimArrayMemoryDirectorJava<UnsignedBytes> dir=new  WrappedMultiDimArrayMemoryDirectorJava<UnsignedBytes>(obj.get_multidimbuffer());
    return dir;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public WrappedPodArrayMemoryDirector getPodArrayMemory(String name) {
    throw new MemberNotFoundException("Member Not Found");
    }
    public WrappedPodMultiDimArrayMemoryDirector getPodMultiDimArrayMemory(String name) {
    throw new MemberNotFoundException("Member Not Found");
    }
    public WrappedNamedArrayMemoryDirector getNamedArrayMemory(String name) {
    throw new MemberNotFoundException("Member Not Found");
    }
    public WrappedNamedMultiDimArrayMemoryDirector getNamedMultiDimArrayMemory(String name) {
    throw new MemberNotFoundException("Member Not Found");
    }
    public String getRRType() { return "experimental.createwebcam2.Webcam"; }
}
