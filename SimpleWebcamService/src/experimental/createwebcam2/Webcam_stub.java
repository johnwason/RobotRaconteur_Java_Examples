//This file is automatically generated. DO NOT EDIT!
package experimental.createwebcam2;
import java.util.*;
import com.robotraconteur.*;
public class Webcam_stub extends ServiceStub implements Webcam, async_Webcam {
    private Pipe<WebcamImage> rr_FrameStream;
    private ArrayMemory<UnsignedBytes> rr_buffer;
    private MultiDimArrayMemory<UnsignedBytes> rr_multidimbuffer;
    public Webcam_stub(WrappedServiceStub innerstub) {
        super(innerstub); 
    rr_FrameStream=new Pipe<WebcamImage>(innerstub.getPipe("FrameStream"));
    rr_buffer=new ArrayMemoryClient<UnsignedBytes>(innerstub.getArrayMemory("buffer"));
    rr_multidimbuffer=new MultiDimArrayMemoryClient<UnsignedBytes>(innerstub.getMultiDimArrayMemory("multidimbuffer"));
    }
    public String get_Name() {
    return MessageElementUtil.unpackString(rr_innerstub.propertyGet("Name"));
    }
    public WebcamImage CaptureFrame() {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    MessageElement rr_me=null;
    try {
    rr_me=rr_innerstub.functionCall("CaptureFrame",rr_param);
    return MessageElementUtil.<WebcamImage>unpackStructure(rr_me);
    }
    finally {
    rr_param.delete();
    if (rr_me!=null) rr_me.delete();
    }
    }
    public void StartStreaming() {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    MessageElement rr_me=null;
    try {
    rr_me=rr_innerstub.functionCall("StartStreaming",rr_param);
    }
    finally {
    rr_param.delete();
    if (rr_me!=null) rr_me.delete();
    }
    }
    public void StopStreaming() {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    MessageElement rr_me=null;
    try {
    rr_me=rr_innerstub.functionCall("StopStreaming",rr_param);
    }
    finally {
    rr_param.delete();
    if (rr_me!=null) rr_me.delete();
    }
    }
    public WebcamImage_size CaptureFrameToBuffer() {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    MessageElement rr_me=null;
    try {
    rr_me=rr_innerstub.functionCall("CaptureFrameToBuffer",rr_param);
    return MessageElementUtil.<WebcamImage_size>unpackStructure(rr_me);
    }
    finally {
    rr_param.delete();
    if (rr_me!=null) rr_me.delete();
    }
    }
    public void dispatchEvent(String rr_membername, vectorptr_messageelement rr_m) {
    }
    public Pipe<WebcamImage> get_FrameStream()
    { return rr_FrameStream;  }
    public void set_FrameStream(Pipe<WebcamImage> value)
    { throw new RuntimeException();}
    public MessageElement callbackCall(String rr_membername, vectorptr_messageelement rr_m) {
    throw new MemberNotFoundException("Member not found");
    }
    public ArrayMemory<UnsignedBytes> get_buffer()
    { return rr_buffer; }
    public MultiDimArrayMemory<UnsignedBytes> get_multidimbuffer()
    { return rr_multidimbuffer; }
    public void async_get_Name(Action2<String,RuntimeException> rr_handler, int rr_timeout)
    {
    rr_async_PropertyGet("Name",new rrend_async_get_Name(),rr_handler,rr_timeout);
    }
    protected class rrend_async_get_Name implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement value ,RuntimeException err,Object param)
    {
    Action2<String,RuntimeException> rr_handler=(Action2<String,RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action("",err);
    return;
    }
    String rr_ret;
    try {
    rr_ret=MessageElementUtil.unpackString(value);
    } catch (RuntimeException err2) {
    rr_handler.action("",err2);
    return;
    }
    rr_handler.action(rr_ret,null);
    }
    }
    public void async_CaptureFrame(Action2<WebcamImage,RuntimeException> rr_handler,int rr_timeout)
    {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    try {
    rr_async_FunctionCall("CaptureFrame",rr_param,new rrend_async_CaptureFrame(),rr_handler,rr_timeout);
    }
    finally {
    rr_param.delete();
    }
    }
    protected class rrend_async_CaptureFrame implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement ret ,RuntimeException err,Object param)
    {
    Action2<WebcamImage,RuntimeException> rr_handler=(Action2<WebcamImage,RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(null,err);
    return;
    }
    WebcamImage rr_ret;
    try {
    rr_ret=MessageElementUtil.<WebcamImage>unpackStructure(ret);
    } catch (RuntimeException err2) {
    rr_handler.action(null,err2);
    return;
    }
    rr_handler.action(rr_ret, null);
    }
    }
    public void async_StartStreaming(Action1<RuntimeException> rr_handler,int rr_timeout)
    {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    try {
    rr_async_FunctionCall("StartStreaming",rr_param,new rrend_async_StartStreaming(),rr_handler,rr_timeout);
    }
    finally {
    rr_param.delete();
    }
    }
    protected class rrend_async_StartStreaming implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement ret ,RuntimeException err,Object param)
    {
    Action1<RuntimeException> rr_handler=(Action1<RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(err);
    return;
    }
    rr_handler.action(null);
    }
    }
    public void async_StopStreaming(Action1<RuntimeException> rr_handler,int rr_timeout)
    {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    try {
    rr_async_FunctionCall("StopStreaming",rr_param,new rrend_async_StopStreaming(),rr_handler,rr_timeout);
    }
    finally {
    rr_param.delete();
    }
    }
    protected class rrend_async_StopStreaming implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement ret ,RuntimeException err,Object param)
    {
    Action1<RuntimeException> rr_handler=(Action1<RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(err);
    return;
    }
    rr_handler.action(null);
    }
    }
    public void async_CaptureFrameToBuffer(Action2<WebcamImage_size,RuntimeException> rr_handler,int rr_timeout)
    {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    try {
    rr_async_FunctionCall("CaptureFrameToBuffer",rr_param,new rrend_async_CaptureFrameToBuffer(),rr_handler,rr_timeout);
    }
    finally {
    rr_param.delete();
    }
    }
    protected class rrend_async_CaptureFrameToBuffer implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement ret ,RuntimeException err,Object param)
    {
    Action2<WebcamImage_size,RuntimeException> rr_handler=(Action2<WebcamImage_size,RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(null,err);
    return;
    }
    WebcamImage_size rr_ret;
    try {
    rr_ret=MessageElementUtil.<WebcamImage_size>unpackStructure(ret);
    } catch (RuntimeException err2) {
    rr_handler.action(null,err2);
    return;
    }
    rr_handler.action(rr_ret, null);
    }
    }
}
